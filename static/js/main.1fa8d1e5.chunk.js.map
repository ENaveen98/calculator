{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","DoOperation","valueSoFar","number","operation","parseFloat","doCalculation","inputString","Regex","spRegex","opSingleRegex","numRegex","match","test","nextOp","operators","length","Calculator","props","state","numbers","decimal","clear","displayText","enterNumber","bind","clearDisplay","enterOperation","doMath","enterDecimal","this","setState","e","toString","numbersInDisplay","finalNumber","id","onClick","map","element","index","html","numName","entering","symbol","symName","React","Component","Number","updateDisplay","MathOperators","Clear","Decimal","App","className","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1fa8d1e5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nfunction DoOperation(valueSoFar, number, operation) {\n  valueSoFar = parseFloat(valueSoFar);\n  number = parseFloat(number);\n  switch (operation) {\n    case \"+\":\n      return valueSoFar + number;\n      break;\n    case \"-\":\n      return valueSoFar - number;\n      break;\n    case \"*\":\n      return valueSoFar * number;\n      break;\n    case \"/\":\n      return valueSoFar / number;\n      break;\n  }\n}\n\nfunction doCalculation(inputString) {\n  let specialRegex = /[\\+\\-\\*\\/]+[-][0-9\\.]+/g;\n  // console.log(inputString.match(specialRegex));\n  let Regex = /[\\+\\-\\*\\/]+[0-9\\.]+/g;\n  // console.log(inputString.match(Regex));\n  let startRegex = /^[0-9\\.]+/;\n  // console.log(inputString.match(startRegex));\n\n  let opRegex = /[\\+\\-\\*\\/]+/;\n  let spRegex = /[\\+\\-\\*\\/]+[-][0-9\\.]+/;\n  let opSingleRegex = /[\\+\\-\\*\\/]/g;\n  let numRegex = /[0-9\\.]+/;\n  let valueSoFar = inputString.match(startRegex)[0];\n  if (!Regex.test(inputString)) {\n    return inputString;\n  }\n  for (let nextOp of inputString.match(Regex)) {\n    if (spRegex.test(nextOp)) {\n      // console.log(\"Extra Special\", nextOp);\n      let operators = nextOp.match(opSingleRegex);\n      let operation = operators[operators.length - 2];\n      let number = \"-\" + nextOp.match(numRegex)[0];\n      // console.log(valueSoFar);\n      // console.log(operation, number);\n      valueSoFar = DoOperation(valueSoFar, number, operation);\n      // console.log(valueSoFar);\n    } else {\n      // console.log(\"Not Special\", nextOp);\n      let operators = nextOp.match(opSingleRegex);\n      let operation = operators[operators.length - 1];\n      let number = nextOp.match(numRegex)[0];\n      // console.log(valueSoFar);\n      // console.log(operation, number);\n      valueSoFar = DoOperation(valueSoFar, number, operation);\n      // console.log(valueSoFar);\n    }\n    // let temp = 0;\n  }\n  return valueSoFar;\n}\n\n// doCalculation(\"5+5++5*8*-9***////-101\");\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"calculator\">\n        <Calculator />\n      </div>\n    </div>\n  );\n}\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      numbers: [\n        \"zero\",\n        \"one\",\n        \"two\",\n        \"three\",\n        \"four\",\n        \"five\",\n        \"six\",\n        \"seven\",\n        \"eight\",\n        \"nine\",\n      ],\n      operators: [\n        [\"add\", \"+\"],\n        [\"subtract\", \"-\"],\n        [\"multiply\", \"*\"],\n        [\"divide\", \"/\"],\n      ],\n      decimal: [\"decimal\", \".\"],\n      clear: [\"clear\", \"clear\"],\n      displayText: \"0\",\n    };\n    this.enterNumber = this.enterNumber.bind(this);\n    this.clearDisplay = this.clearDisplay.bind(this);\n    this.enterOperation = this.enterOperation.bind(this);\n    this.doMath = this.doMath.bind(this);\n    this.enterDecimal = this.enterDecimal.bind(this);\n  }\n\n  clearDisplay() {\n    this.setState({ displayText: \"0\" });\n  }\n\n  enterNumber(e) {\n    this.setState((state) => {\n      if (state.displayText === \"0\") {\n        return { displayText: e.toString() };\n      } else {\n        return { displayText: state.displayText + e.toString() };\n      }\n    });\n  }\n\n  enterOperation(e) {\n    this.setState((state) => {\n      if (state.displayText === \"0\") {\n        return { displayText: \"0\" };\n      } else {\n        return { displayText: state.displayText + e.toString() };\n      }\n    });\n  }\n\n  enterDecimal() {\n    let numbersRegex = /[0-9\\.]+/g;\n    let numbersInDisplay = this.state.displayText.match(numbersRegex);\n    let decimalRegex = /[\\.]/;\n    let finalNumber = numbersInDisplay[numbersInDisplay.length - 1];\n    if (!decimalRegex.test(finalNumber)) {\n      this.setState((state) => {\n        return { displayText: state.displayText + \".\" };\n      });\n    } else {\n      this.setState((state) => {\n        return { displayText: state.displayText };\n      });\n    }\n  }\n\n  doMath() {\n    this.setState((state) => {\n      return { displayText: doCalculation(state.displayText).toString() };\n    });\n  }\n\n  render() {\n    return (\n      <div id=\"calculator-elements\">\n        <button id=\"equals\" onClick={this.doMath}>\n          =\n        </button>\n\n        {this.state.numbers.map(function (element, index) {\n          let html = (\n            <Number\n              number={index}\n              numName={element}\n              entering={this.enterNumber}\n            />\n          );\n          index += 1;\n          return html;\n        }, this)}\n\n        {this.state.operators.map(function (element) {\n          let html = (\n            <MathOperators\n              symbol={element[1]}\n              symName={element[0]}\n              entering={this.enterOperation}\n            />\n          );\n          return html;\n        }, this)}\n\n        <Decimal\n          symbol={this.state.decimal[1]}\n          symName={this.state.decimal[0]}\n          entering={this.enterDecimal}\n        />\n\n        <Clear\n          symbol={this.state.clear[1]}\n          symName={this.state.clear[0]}\n          clearDisplay={this.clearDisplay}\n        />\n\n        <div id=\"display\">{this.state.displayText}</div>\n      </div>\n    );\n  }\n}\n\nclass Number extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateDisplay = this.updateDisplay.bind(this);\n  }\n\n  updateDisplay() {\n    this.props.entering(this.props.number);\n  }\n\n  render() {\n    return (\n      <div id={\"div_\" + this.props.numName}>\n        <button id={this.props.numName} onClick={this.updateDisplay}>\n          {this.props.number}\n        </button>\n      </div>\n    );\n  }\n}\n\nclass MathOperators extends React.Component {\n  constructor(props) {\n    super(props);\n    this.updateDisplay = this.updateDisplay.bind(this);\n  }\n\n  updateDisplay() {\n    this.props.entering(this.props.symbol);\n  }\n\n  render() {\n    return (\n      <div id={\"div_\" + this.props.symName}>\n        <button id={this.props.symName} onClick={this.updateDisplay}>\n          {this.props.symbol}\n        </button>\n      </div>\n    );\n  }\n}\n\nclass Clear extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id={\"div_\" + this.props.symName}>\n        <button id={this.props.symName} onClick={this.props.clearDisplay}>\n          {this.props.symbol}\n        </button>\n      </div>\n    );\n  }\n}\n\nclass Decimal extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div id={\"div_\" + this.props.symName}>\n        <button id={this.props.symName} onClick={this.props.entering}>\n          {this.props.symbol}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}